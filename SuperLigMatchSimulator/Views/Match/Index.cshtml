@using System.Text.Json
@using SuperLigMatchSimulator.Classes
@{
	ViewData["Title"] = "Index";
	Layout = null;
}

<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mx-auto px-2">
	<div class="flex flex-col lg:flex-row">
		<!-- Left side for week match component -->
		<div class="w-full lg:w-2/5 mb-4 lg:mb-0 lg:pr-4">
			@await Component.InvokeAsync("_WeekMatchSelectorPartial", new { match = (WeekMatch)ViewBag.CurrentWeekMatches })
		</div>

		<!-- Right side for standings table -->
		<div class="w-full lg:w-3/5">
			<div class="py-4">
				<div class="shadow overflow-x-auto border-b border-gray-200 sm:rounded-lg">
					<div class="bg-gray-100 p-4">
						<div class="flex flex-wrap gap-2">
							<div class="flex items-center">
								<div class="w-4 h-4 bg-green-300 mr-2"></div>
								<span class="text-xs sm:text-sm">2025-26 UEFA Konferans Ligi Lig A.</span>
							</div>
							<div class="flex items-center">
								<div class="w-4 h-4 bg-green-100 mr-2"></div>
								<span class="text-xs sm:text-sm">2025-26 UEFA ŞL 2. ET</span>
							</div>
							<div class="flex items-center">
								<div class="w-4 h-4 bg-blue-200 mr-2"></div>
								<span class="text-xs sm:text-sm">2025-26 UEFA AL 2. ET</span>
							</div>
							<div class="flex items-center">
								<div class="w-4 h-4 bg-yellow-200 mr-2"></div>
								<span class="text-xs sm:text-sm">2025-26 UEFA KL 2. ET</span>
							</div>
							<div class="flex items-center">
								<div class="w-4 h-4 bg-red-200 mr-2"></div>
								<span class="text-xs sm:text-sm">2025-26 1. Lig</span>
							</div>
						</div>
					</div>
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-8">#</th>
									<th class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Takım</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">O</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">G</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">B</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">M</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">AG</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">YG</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">AV</th>
									<th class="px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-8">P</th>
								</tr>
							</thead>
							<tbody id="standingsTableBody" class="bg-white divide-y divide-gray-200">
								<!-- Will be populated by JavaScript -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script src="sweetalert2.min.js"></script>
<link rel="stylesheet" href="sweetalert2.min.css">
<script>

        if (@(ViewBag.ShouldInitialize ? "true" : "false"))
        {
            if (!localStorage.getItem('standings') || !localStorage.getItem('matches')) {
                localStorage.setItem('standings', '@Html.Raw(ViewBag.InitialStandings)');
                localStorage.setItem('matches', '@Html.Raw(ViewBag.InitialMatches)');
            } else {
				console.log("girdi")
                const initialMatches = JSON.parse('@Html.Raw(ViewBag.InitialMatches)');
                const storedMatches = JSON.parse(localStorage.getItem('matches'));
				//console.log(initialMatches)
				//console.log(storedMatches)
				let changedMatches = [];

						storedMatches.forEach(weekMatch => {
	   weekMatch.matches.forEach(storedMatch => {
		   const initialMatch = initialMatches.flatMap(week => week.Matches).find(match =>
			   match.MatchId === storedMatch.matchId
		   );
		  // console.log(initialMatch)
		 //  console.log(storedMatch)

		   if (initialMatch && initialMatch.IsFinished !== storedMatch.isFinished) {
			   storedMatch.isFinished = initialMatch.IsFinished;
			   storedMatch.homeScore = initialMatch.HomeScore;
			   storedMatch.awayScore = initialMatch.AwayScore;

				changedMatches.push({
			   initialMatch: initialMatch,
			   storedMatch: storedMatch
		   });
		   }
	   });
	});
				localStorage.setItem('changedMatches', JSON.stringify(changedMatches));
                localStorage.setItem('matches', JSON.stringify(storedMatches));
						const currentStandings = JSON.parse(localStorage.getItem('currentStandings') || '[]');

						const formData = new FormData();
						formData.append('allMatches',JSON.stringify(storedMatches));
						formData.append('currentStandings',JSON.stringify(currentStandings));

		//console.log('Sending matches:', currentMatches);

		// FormData'ya matches'i ekle

		fetch('/Match/UpdateStandings', {
			method: 'POST',
			body: formData
		})
		.then(response => {
			if (!response.ok) {
				return response.json().then(err => {
					console.error('Server error:', err);
					throw new Error(err.details || 'Server error occurred');
				});
			}
			return response.json();
		})
		.then(data => {
			console.log('Received data:', data);
			localStorage.setItem('standings', JSON.stringify(data.standings));
			localStorage.setItem('matches', JSON.stringify(data.matches));
			updateStandingsTable();
			updateMatchesDisplay();
			let chnMatch=JSON.parse(localStorage.getItem('changedMatches')) || [];
				if (chnMatch.length > 0) {
		let messageText = '';
		chnMatch.forEach(change => {
			messageText += `Maç: ${change.initialMatch.HomeTeam} vs ${change.initialMatch.AwayTeam}\n`;
			messageText += `Simüle Edilen Skor: ${change.storedMatch.homeScore} - ${change.storedMatch.awayScore}\n`;
			messageText += `Gerçek Skor: ${change.initialMatch.HomeScore} - ${change.initialMatch.AwayScore}\n`;
			messageText += '------------------------\n';
		});
		localStorage.removeItem('changedMatches');
		Swal.fire({
			title: 'Güncellenen Maçlar',
			html: messageText.split('\n').join('<br>'),
			icon: 'info',
			confirmButtonText: 'Tamam'
		});
	}
		})
		.catch(error => {
			console.error('Error:', error);
			// Hata durumunda kullanıcıya bilgi ver
			alert('Bir hata oluştu: ' + error.message);
		});
            }
        }

	// Standings tablosunu güncelle
	function updateStandingsTable() {
			const standings = JSON.parse(localStorage.getItem('standings')).map(item => {
	   const convertedItem = {};
	   for (const key in item) {
		   const lowercaseKey = key.charAt(0).toLowerCase() + key.slice(1);
		   convertedItem[lowercaseKey] = item[key];
	   }
	   return convertedItem;
	});;
		const tbody = document.getElementById('standingsTableBody');
		tbody.innerHTML = '';
		console.log(standings[0])
		standings.forEach((team, index) => {
			let rowColor = '';
			if (index === 0) rowColor = 'bg-green-300 text-black';
			else if (index === 1) rowColor = 'bg-green-100 text-black';
			else if (index === 2) rowColor = 'bg-blue-200 text-black';
			else if (index === 3) rowColor = 'bg-yellow-200 text-black';
			else if (index >= standings.length - 4) rowColor = 'bg-red-200 text-black';

			const row = `
				<tr class="${rowColor} hover:opacity-90 transition duration-200">
					<td class="px-2 py-2 text-xs text-sm font-medium">
						<div class="flex items-center space-x-1">
							<span>${getTrendIcon(team.trendDirection)}</span>
							<span>${index + 1}</span>
						</div>
					</td>
					<td class="px-2 py-2 text-xs">
						<div class="flex items-center">
							<div class="flex-shrink-0 h-10 w-10 mr-3">
								<img class="h-10 w-10 rounded-full object-cover" src="${team.teamLogo}" alt="${team.team} Logo">
							</div>
							<div class="text-sm font-medium text-gray-900">${team.team}</div>
							${team.reductedPoints !== 0 ? `<div class="text-xs text-gray-500 mt-1">(${team.reductedPoints} puan)</div>` : ''}
						</div>
					</td>
					<td class="px-2 py-2 text-xs text-center text-sm text-gray-500">${team.played}</td>
					<td class="px-2 py-2 text-xs text-center text-sm text-green-600">${team.won}</td>
					<td class="px-2 py-2 text-xs text-center text-sm text-yellow-600">${team.drawn}</td>
					<td class="px-2 py-2 text-xs text-center text-sm text-red-600">${team.lost}</td>
					<td class="px-2 py-2 text-xs text-center text-sm text-blue-600">${team.goalsFor}</td>
					<td class="px-2 py-2 text-xs text-center text-sm text-red-600">${team.goalsAgainst}</td>
					<td class="px-2 py-2 text-xs text-center text-sm ${team.goalDifference >= 0 ? 'text-green-600' : 'text-red-600'}">${team.goalDifference}</td>
					<td class="px-2 py-2 text-xs text-center text-sm font-semibold text-gray-900">${team.points}</td>
				</tr>
			`;
			tbody.innerHTML += row;
		});
	}

	function getTrendIcon(trend) {
		switch(trend) {
			case 0: return '<span class="text-green-600">↑</span>';
			case 1: return '<span class="text-red-600">↓</span>';
			default: return '<span class="text-gray-500">→</span>';
		}
	}



</script>
<script>
	document.addEventListener('DOMContentLoaded', function() {
		console.log("updated");
		updateStandingsTable();

	});
</script>